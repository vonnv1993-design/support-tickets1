import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import io
import base64
from typing import Dict, List
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import uuid

# Page config
st.set_page_config(
    page_title="H·ªá th·ªëng Qu·∫£n l√Ω K·∫ø ho·∫°ch Mua s·∫Øm",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'projects' not in st.session_state:
    st.session_state.projects = {}
if 'suppliers' not in st.session_state:
    st.session_state.suppliers = {
        'Ph·∫ßn m·ªÅm': ['C√¥ng ty TNHH ABC Software', 'VTI Solutions', 'FPT Software'],
        'H·∫° t·∫ßng': ['Dell Technologies', 'HP Enterprise', 'Cisco Systems'],
        'B·∫£o m·∫≠t': ['Kaspersky', 'McAfee', 'Symantec']
    }
if 'rfis' not in st.session_state:
    st.session_state.rfis = {}

# Helper functions
def generate_id():
    return str(uuid.uuid4())[:8]

def create_download_link(df, filename, text):
    csv = df.to_csv(index=False, encoding='utf-8-sig')
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{filename}">{text}</a>'
    return href

def send_email_mock(recipients, subject, body, attachments=None):
    """Mock email function - in production, configure SMTP settings"""
    st.success(f"‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi {len(recipients)} nh√† cung c·∫•p")
    return True

# Main app
def main():
    st.title("üè¢ H·ªÜ TH·ªêNG QU·∫¢N L√ù K·∫æ HO·∫†CH MUA S·∫ÆM")
    st.markdown("---")

    # Sidebar navigation
    with st.sidebar:
        st.header("üìã MENU CH·ª®C NƒÇNG")
        page = st.radio(
            "Ch·ªçn ch·ª©c nƒÉng:",
            [
                "üè† Dashboard T·ªïng quan",
                "üìÑ Giai ƒëo·∫°n 1: RFI & G·ª≠i NCC",
                "üí∞ Giai ƒëo·∫°n 2: K·∫ø ho·∫°ch Ng√¢n s√°ch", 
                "üìä Business Use Case",
                "üéØ Master Plan"
            ]
        )

    # Route to different pages
    if page == "üè† Dashboard T·ªïng quan":
        dashboard_page()
    elif page == "üìÑ Giai ƒëo·∫°n 1: RFI & G·ª≠i NCC":
        rfi_page()
    elif page == "üí∞ Giai ƒëo·∫°n 2: K·∫ø ho·∫°ch Ng√¢n s√°ch":
        budget_page()
    elif page == "üìä Business Use Case":
        business_case_page()
    elif page == "üéØ Master Plan":
        master_plan_page()

def dashboard_page():
    st.header("üìä DASHBOARD T·ªîNG QUAN")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("T·ªïng s·ªë d·ª± √°n", len(st.session_state.projects))
    
    with col2:
        rfis_sent = sum(1 for rfi in st.session_state.rfis.values() if rfi.get('status') == 'ƒê√£ g·ª≠i')
        st.metric("RFI ƒë√£ g·ª≠i", rfis_sent)
    
    with col3:
        total_budget = sum(p.get('total_budget', 0) for p in st.session_state.projects.values())
        st.metric("T·ªïng ng√¢n s√°ch", f"{total_budget:,.0f} VNƒê")
    
    with col4:
        completed_projects = sum(1 for p in st.session_state.projects.values() 
                               if p.get('master_plan', {}).get('step_5', {}).get('status') == 'Ho√†n th√†nh')
        st.metric("D·ª± √°n ho√†n th√†nh", completed_projects)

    if st.session_state.projects:
        st.subheader("üìà Bi·ªÉu ƒë·ªì Ti·∫øn ƒë·ªô D·ª± √°n")
        
        # Create project status data
        project_data = []
        for proj_id, project in st.session_state.projects.items():
            master_plan = project.get('master_plan', {})
            completed_steps = sum(1 for step in master_plan.values() 
                                if step.get('status') == 'Ho√†n th√†nh')
            progress = (completed_steps / 5) * 100
            project_data.append({
                'D·ª± √°n': project.get('name', f'D·ª± √°n {proj_id}'),
                'Ti·∫øn ƒë·ªô (%)': progress,
                'Ng√¢n s√°ch (tri·ªáu VNƒê)': project.get('total_budget', 0) / 1000000
            })
        
        df_projects = pd.DataFrame(project_data)
        
        if not df_projects.empty:
            fig = px.bar(df_projects, x='D·ª± √°n', y='Ti·∫øn ƒë·ªô (%)', 
                        title='Ti·∫øn ƒë·ªô c√°c D·ª± √°n',
                        color='Ti·∫øn ƒë·ªô (%)',
                        color_continuous_scale='RdYlGn')
            st.plotly_chart(fig, use_container_width=True)
    
    else:
        st.info("üìù Ch∆∞a c√≥ d·ª± √°n n√†o. Vui l√≤ng t·∫°o d·ª± √°n m·ªõi ·ªü c√°c ch·ª©c nƒÉng kh√°c.")

def rfi_page():
    st.header("üìÑ GIAI ƒêO·∫†N 1: SO·∫†N TH·∫¢O RFI & G·ª¨I NCC")
    
    tab1, tab2, tab3 = st.tabs(["‚úèÔ∏è T·∫°o RFI m·ªõi", "üìã Qu·∫£n l√Ω RFI", "üìä B√°o c√°o RFI"])
    
    with tab1:
        st.subheader("T·∫°o Request for Information (RFI)")
        
        col1, col2 = st.columns(2)
        
        with col1:
            project_name = st.text_input("T√™n d·ª± √°n")
            rfi_title = st.text_input("Ti√™u ƒë·ªÅ RFI")
            supplier_category = st.selectbox("Ch·ªçn lƒ©nh v·ª±c NCC", 
                                           list(st.session_state.suppliers.keys()))
        
        with col2:
            deadline = st.date_input("H·∫°n ph·∫£n h·ªìi", 
                                   datetime.now() + timedelta(days=14))
            priority = st.selectbox("ƒê·ªô ∆∞u ti√™n", ["Th·∫•p", "Trung b√¨nh", "Cao", "Kh·∫©n c·∫•p"])
        
        st.subheader("N·ªôi dung RFI")
        rfi_content = st.text_area("M√¥ t·∫£ y√™u c·∫ßu chi ti·∫øt", height=200,
                                  placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ y√™u c·∫ßu, th√¥ng s·ªë k·ªπ thu·∫≠t, ti√™u ch√≠ ƒë√°nh gi√°...")
        
        # File upload
        uploaded_file = st.file_uploader("Upload file RFI (Word/PDF)", 
                                       type=['docx', 'pdf', 'doc'])
        
        # Supplier selection
        st.subheader("Ch·ªçn Nh√† cung c·∫•p")
        selected_suppliers = st.multiselect(
            "Danh s√°ch NCC nh·∫≠n RFI:",
            st.session_state.suppliers[supplier_category],
            default=st.session_state.suppliers[supplier_category]
        )
        
        if st.button("üöÄ T·∫°o v√† G·ª≠i RFI", type="primary"):
            if project_name and rfi_title and rfi_content and selected_suppliers:
                rfi_id = generate_id()
                
                # Save RFI
                st.session_state.rfis[rfi_id] = {
                    'project_name': project_name,
                    'title': rfi_title,
                    'content': rfi_content,
                    'category': supplier_category,
                    'suppliers': selected_suppliers,
                    'deadline': deadline.isoformat(),
                    'priority': priority,
                    'status': 'ƒê√£ g·ª≠i',
                    'created_date': datetime.now().isoformat(),
                    'responses': {}
                }
                
                # Mock send email
                send_email_mock(selected_suppliers, f"RFI: {rfi_title}", rfi_content)
                
                st.success(f"‚úÖ RFI ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g·ª≠i t·ªõi {len(selected_suppliers)} nh√† cung c·∫•p!")
                st.rerun()
            else:
                st.error("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc")
    
    with tab2:
        st.subheader("Danh s√°ch RFI")
        
        if st.session_state.rfis:
            for rfi_id, rfi in st.session_state.rfis.items():
                with st.expander(f"üìÑ {rfi['title']} - {rfi['project_name']}"):
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.write(f"**Tr·∫°ng th√°i:** {rfi['status']}")
                        st.write(f"**∆Øu ti√™n:** {rfi['priority']}")
                    
                    with col2:
                        st.write(f"**H·∫°n ph·∫£n h·ªìi:** {rfi['deadline']}")
                        st.write(f"**S·ªë NCC:** {len(rfi['suppliers'])}")
                    
                    with col3:
                        responses = len(rfi.get('responses', {}))
                        st.write(f"**ƒê√£ ph·∫£n h·ªìi:** {responses}/{len(rfi['suppliers'])}")
                    
                    st.write("**N·ªôi dung:**")
                    st.write(rfi['content'])
                    
                    # Mock response tracking
                    if st.button(f"üìù C·∫≠p nh·∫≠t ph·∫£n h·ªìi", key=f"update_{rfi_id}"):
                        st.info("T√≠nh nƒÉng c·∫≠p nh·∫≠t ph·∫£n h·ªìi NCC - S·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn")
        else:
            st.info("üìù Ch∆∞a c√≥ RFI n√†o ƒë∆∞·ª£c t·∫°o")
    
    with tab3:
        st.subheader("B√°o c√°o T·ªïng h·ª£p RFI")
        
        if st.session_state.rfis:
            # Create summary data
            rfi_data = []
            for rfi_id, rfi in st.session_state.rfis.items():
                responses = len(rfi.get('responses', {}))
                total_suppliers = len(rfi['suppliers'])
                response_rate = (responses / total_suppliers * 100) if total_suppliers > 0 else 0
                
                rfi_data.append({
                    'RFI ID': rfi_id,
                    'D·ª± √°n': rfi['project_name'],
                    'Ti√™u ƒë·ªÅ': rfi['title'],
                    'Lƒ©nh v·ª±c': rfi['category'],
                    'T·ªïng NCC': total_suppliers,
                    'ƒê√£ ph·∫£n h·ªìi': responses,
                    'T·ª∑ l·ªá ph·∫£n h·ªìi (%)': response_rate,
                    'Tr·∫°ng th√°i': rfi['status'],
                    'H·∫°n ch√≥t': rfi['deadline']
                })
            
            df_rfi = pd.DataFrame(rfi_data)
            st.dataframe(df_rfi, use_container_width=True)
            
            # Download report
            st.markdown(create_download_link(df_rfi, "rfi_report.csv", "üì• T·∫£i b√°o c√°o RFI"), 
                       unsafe_allow_html=True)
        else:
            st.info("üìù Ch∆∞a c√≥ d·ªØ li·ªáu RFI ƒë·ªÉ b√°o c√°o")

def budget_page():
    st.header("üí∞ GIAI ƒêO·∫†N 2: HO√ÄN THI·ªÜN B·∫¢NG K·∫æ HO·∫†CH NG√ÇN S√ÅCH")
    
    # Project selection
    project_name = st.selectbox("Ch·ªçn d·ª± √°n", 
                               options=["T·∫°o d·ª± √°n m·ªõi"] + [f"{p['name']}" for p in st.session_state.projects.values()],
                               key="budget_project")
    
    if project_name == "T·∫°o d·ª± √°n m·ªõi":
        project_name = st.text_input("T√™n d·ª± √°n m·ªõi")
        if project_name:
            project_id = generate_id()
            st.session_state.projects[project_id] = {
                'name': project_name,
                'created_date': datetime.now().isoformat(),
                'budget_items': [],
                'total_budget': 0
            }
    
    if project_name and project_name != "T·∫°o d·ª± √°n m·ªõi":
        # Find project
        current_project = None
        current_project_id = None
        for proj_id, project in st.session_state.projects.items():
            if project['name'] == project_name:
                current_project = project
                current_project_id = proj_id
                break
        
        if current_project:
            st.subheader(f"üìä B·∫£ng Ng√¢n s√°ch - {project_name}")
            
            # Add budget item
            with st.expander("‚ûï Th√™m h·∫°ng m·ª•c m·ªõi"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    item_name = st.text_input("T√™n h·∫°ng m·ª•c")
                    authority_level = st.selectbox("C·∫•p th·∫©m quy·ªÅn", 
                                                 ["Ban", "Ph√≤ng", "T·ªïng c√¥ng ty", "HƒêQT"])
                
                with col2:
                    unit_price = st.number_input("ƒê∆°n gi√° (VNƒê)", min_value=0, step=1000)
                    months = st.number_input("S·ªë th√°ng", min_value=1, value=1)
                
                with col3:
                    vat_rate = st.number_input("Thu·∫ø VAT (%)", min_value=0, max_value=100, value=10)
                    notes = st.text_area("Ghi ch√∫", height=80)
                
                if st.button("‚ûï Th√™m h·∫°ng m·ª•c"):
                    if item_name and unit_price > 0:
                        before_tax = unit_price * months
                        after_tax = before_tax * (1 + vat_rate/100)
                        
                        budget_item = {
                            'name': item_name,
                            'authority_level': authority_level,
                            'unit_price': unit_price,
                            'months': months,
                            'before_tax': before_tax,
                            'after_tax': after_tax,
                            'vat_rate': vat_rate,
                            'notes': notes
                        }
                        
                        if 'budget_items' not in current_project:
                            current_project['budget_items'] = []
                        
                        current_project['budget_items'].append(budget_item)
                        current_project['total_budget'] = sum(item['after_tax'] for item in current_project['budget_items'])
                        
                        st.success("‚úÖ ƒê√£ th√™m h·∫°ng m·ª•c th√†nh c√¥ng!")
                        st.rerun()
                    else:
                        st.error("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin")
            
            # Display budget table
            if current_project.get('budget_items'):
                budget_data = []
                for i, item in enumerate(current_project['budget_items'], 1):
                    budget_data.append({
                        'STT': i,
                        'H·∫°ng m·ª•c': item['name'],
                        'C·∫•p th·∫©m quy·ªÅn': item['authority_level'],
                        'ƒê∆°n gi√° (VNƒê)': f"{item['unit_price']:,.0f}",
                        'S·ªë th√°ng': item['months'],
                        'Th√†nh ti·ªÅn (tr∆∞·ªõc thu·∫ø)': f"{item['before_tax']:,.0f}",
                        'Sau thu·∫ø (VAT)': f"{item['after_tax']:,.0f}",
                        'Ghi ch√∫': item['notes']
                    })
                
                df_budget = pd.DataFrame(budget_data)
                st.dataframe(df_budget, use_container_width=True)
                
                # Summary
                col1, col2, col3 = st.columns(3)
                with col1:
                    total_before_tax = sum(item['before_tax'] for item in current_project['budget_items'])
                    st.metric("T·ªïng tr∆∞·ªõc thu·∫ø", f"{total_before_tax:,.0f} VNƒê")
                
                with col2:
                    total_after_tax = sum(item['after_tax'] for item in current_project['budget_items'])
                    st.metric("T·ªïng sau thu·∫ø", f"{total_after_tax:,.0f} VNƒê")
                
                with col3:
                    avg_monthly = total_after_tax / 12 if total_after_tax > 0 else 0
                    st.metric("Chi ph√≠ TB/th√°ng", f"{avg_monthly:,.0f} VNƒê")
                
                # Budget approval warning
                if total_after_tax > 1000000000:  # 1 billion VND
                    st.warning("‚ö†Ô∏è V∆∞·ª£t ng∆∞·ª°ng ph√™ duy·ªát c·∫•p Ban (>1 t·ª∑ VNƒê) - C·∫ßn tr√¨nh T·ªïng c√¥ng ty")
                elif total_after_tax > 500000000:  # 500 million VND
                    st.info("‚ÑπÔ∏è V∆∞·ª£t ng∆∞·ª°ng ph√™ duy·ªát c·∫•p Ph√≤ng (>500 tri·ªáu VNƒê) - C·∫ßn tr√¨nh c·∫•p Ban")
                
                # Export options
                st.markdown("### üì§ Xu·∫•t b√°o c√°o")
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(create_download_link(df_budget, f"budget_{project_name}.csv", 
                                                   "üì• T·∫£i Excel"), unsafe_allow_html=True)
                with col2:
                    if st.button("üìß G·ª≠i b√°o c√°o"):
                        st.success("‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i!")
            
            else:
                st.info("üìù Ch∆∞a c√≥ h·∫°ng m·ª•c n√†o. Vui l√≤ng th√™m h·∫°ng m·ª•c m·ªõi.")

def business_case_page():
    st.header("üìä BUSINESS USE CASE CHO T·ª™NG D·ª∞ √ÅN")
    
    # Project selection
    if not st.session_state.projects:
        st.info("üìù Ch∆∞a c√≥ d·ª± √°n n√†o. Vui l√≤ng t·∫°o d·ª± √°n ·ªü ph·∫ßn K·∫ø ho·∫°ch Ng√¢n s√°ch.")
        return
    
    project_options = [p['name'] for p in st.session_state.projects.values()]
    selected_project = st.selectbox("Ch·ªçn d·ª± √°n", project_options)
    
    if selected_project:
        # Find project
        current_project = None
        current_project_id = None
        for proj_id, project in st.session_state.projects.items():
            if project['name'] == selected_project:
                current_project = project
                current_project_id = proj_id
                break
        
        st.subheader(f"üìã Business Case - {selected_project}")
        
        # Initialize business case if not exists
        if 'business_case' not in current_project:
            current_project['business_case'] = {}
        
        tab1, tab2, tab3 = st.tabs(["üîç Hi·ªán tr·∫°ng", "‚ö° S·ª± c·∫ßn thi·∫øt", "üìà Hi·ªáu qu·∫£ d·ª± ki·∫øn"])
        
        with tab1:
            st.subheader("üîç HI·ªÜN TR·∫†NG")
            
            current_situation = st.text_area(
                "M√¥ t·∫£ v·∫•n ƒë·ªÅ ho·∫∑c h·∫°n ch·∫ø hi·ªán t·∫°i:",
                value=current_project['business_case'].get('current_situation', ''),
                height=150,
                placeholder="V√≠ d·ª•: H·ªá th·ªëng hi·ªán t·∫°i ch·∫≠m, kh√¥ng ƒë√°p ·ª©ng ƒë∆∞·ª£c kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác..."
            )
            
            current_challenges = st.text_area(
                "C√°c th√°ch th·ª©c c·ª• th·ªÉ:",
                value=current_project['business_case'].get('current_challenges', ''),
                height=150,
                placeholder="Li·ªát k√™ c√°c th√°ch th·ª©c, bottleneck, pain points..."
            )
            
            current_metrics = st.text_area(
                "C√°c ch·ªâ s·ªë hi·ªán t·∫°i (KPI):",
                value=current_project['business_case'].get('current_metrics', ''),
                height=100,
                placeholder="Th·ªùi gian x·ª≠ l√Ω, chi ph√≠, ƒë·ªô h√†i l√≤ng kh√°ch h√†ng..."
            )
            
            # Image upload for current state
            current_image = st.file_uploader("Upload h√¨nh ·∫£nh minh h·ªça hi·ªán tr·∫°ng", 
                                           type=['png', 'jpg', 'jpeg'], key="current_img")
        
        with tab2:
            st.subheader("‚ö° S·ª∞ C·∫¶N THI·∫æT")
            
            business_requirements = st.text_area(
                "Y√™u c·∫ßu nghi·ªáp v·ª•:",
                value=current_project['business_case'].get('business_requirements', ''),
                height=150,
                placeholder="M√¥ t·∫£ y√™u c·∫ßu t·ª´ nghi·ªáp v·ª•, quy tr√¨nh l√†m vi·ªác..."
            )
            
            strategic_alignment = st.text_area(
                "CƒÉn c·ª© chi·∫øn l∆∞·ª£c chuy·ªÉn ƒë·ªïi s·ªë:",
                value=current_project['business_case'].get('strategic_alignment', ''),
                height=150,
                placeholder="Li√™n k·∫øt v·ªõi chi·∫øn l∆∞·ª£c c√¥ng ty, chuy·ªÉn ƒë·ªïi s·ªë, m·ª•c ti√™u d√†i h·∫°n..."
            )
            
            urgency_level = st.selectbox(
                "M·ª©c ƒë·ªô c·∫•p thi·∫øt:",
                ["Kh·∫©n c·∫•p", "Cao", "Trung b√¨nh", "Th·∫•p"],
                index=["Kh·∫©n c·∫•p", "Cao", "Trung b√¨nh", "Th·∫•p"].index(
                    current_project['business_case'].get('urgency_level', 'Trung b√¨nh')
                )
            )
            
            regulatory_compliance = st.text_area(
                "Y√™u c·∫ßu tu√¢n th·ªß (n·∫øu c√≥):",
                value=current_project['business_case'].get('regulatory_compliance', ''),
                height=100,
                placeholder="C√°c quy ƒë·ªãnh ph√°p l√Ω, chu·∫©n m·ª±c ng√†nh..."
            )
        
        with tab3:
            st.subheader("üìà HI·ªÜU QU·∫¢ D·ª∞ KI·∫æN")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**L·ª£i √≠ch ƒë·ªãnh l∆∞·ª£ng:**")
                cost_saving = st.number_input(
                    "Ti·∫øt ki·ªám chi ph√≠ (VNƒê/nƒÉm):",
                    value=current_project['business_case'].get('cost_saving', 0),
                    step=1000000
                )
                
                time_saving = st.number_input(
                    "Ti·∫øt ki·ªám th·ªùi gian (gi·ªù/th√°ng):",
                    value=current_project['business_case'].get('time_saving', 0),
                    step=1
                )
                
                productivity_increase = st.number_input(
                    "TƒÉng nƒÉng su·∫•t (%):",
                    value=current_project['business_case'].get('productivity_increase', 0),
                    step=5
                )
            
            with col2:
                st.write("**L·ª£i √≠ch ƒë·ªãnh t√≠nh:**")
                quality_improvement = st.text_area(
                    "C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng:",
                    value=current_project['business_case'].get('quality_improvement', ''),
                    height=80
                )
                
                user_experience = st.text_area(
                    "Tr·∫£i nghi·ªám ng∆∞·ªùi d√πng:",
                    value=current_project['business_case'].get('user_experience', ''),
                    height=80
                )
                
                process_improvement = st.text_area(
                    "C·∫£i thi·ªán quy tr√¨nh:",
                    value=current_project['business_case'].get('process_improvement', ''),
                    height=80
                )
            
            # ROI calculation
            st.write("**T√≠nh to√°n ROI:**")
            investment = current_project.get('total_budget', 0)
            annual_benefit = cost_saving + (time_saving * 12 * 200000)  # Assume 200k VND per hour
            
            if investment > 0:
                roi = (annual_benefit / investment * 100) if investment > 0 else 0
                payback_period = (investment / annual_benefit * 12) if annual_benefit > 0 else float('inf')
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("ROI (%)", f"{roi:.1f}%")
                with col2:
                    st.metric("L·ª£i √≠ch/nƒÉm", f"{annual_benefit:,.0f} VNƒê")
                with col3:
                    if payback_period != float('inf'):
                        st.metric("Th·ªùi gian ho√†i v·ªën", f"{payback_period:.1f} th√°ng")
                    else:
                        st.metric("Th·ªùi gian ho√†i v·ªën", "N/A")
        
        # Save business case
        if st.button("üíæ L∆∞u Business Case", type="primary"):
            current_project['business_case'].update({
                'current_situation': current_situation,
                'current_challenges': current_challenges,
                'current_metrics': current_metrics,
                'business_requirements': business_requirements,
                'strategic_alignment': strategic_alignment,
                'urgency_level': urgency_level,
                'regulatory_compliance': regulatory_compliance,
                'cost_saving': cost_saving,
                'time_saving': time_saving,
                'productivity_increase': productivity_increase,
                'quality_improvement': quality_improvement,
                'user_experience': user_experience,
                'process_improvement': process_improvement,
                'updated_date': datetime.now().isoformat()
            })
            
            st.success("‚úÖ Business Case ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
        
        # Export business case
        if st.button("üì§ Xu·∫•t b√°o c√°o Business Case"):
            # Create business case summary
            bc = current_project.get('business_case', {})
            summary_data = {
                'Th√¥ng tin': ['D·ª± √°n', 'Ng√¢n s√°ch', 'ROI (%)', 'Th·ªùi gian ho√†i v·ªën'],
                'Gi√° tr·ªã': [
                    selected_project,
                    f"{investment:,.0f} VNƒê",
                    f"{roi:.1f}%" if investment > 0 else "N/A",
                    f"{payback_period:.1f} th√°ng" if payback_period != float('inf') else "N/A"
                ]
            }
            
            df_summary = pd.DataFrame(summary_data)
            st.markdown(create_download_link(df_summary, f"business_case_{selected_project}.csv", 
                                           "üì• T·∫£i Business Case"), unsafe_allow_html=True)

def master_plan_page():
    st.header("üéØ MASTER PLAN - QU·∫¢N L√ù TO√ÄN TR√åNH TRI·ªÇN KHAI")
    
    if not st.session_state.projects:
        st.info("üìù Ch∆∞a c√≥ d·ª± √°n n√†o. Vui l√≤ng t·∫°o d·ª± √°n ·ªü ph·∫ßn K·∫ø ho·∫°ch Ng√¢n s√°ch.")
        return
    
    # Project selection
    project_options = [p['name'] for p in st.session_state.projects.values()]
    selected_project = st.selectbox("Ch·ªçn d·ª± √°n", project_options, key="master_plan_project")
    
    if selected_project:
        # Find project
        current_project = None
        current_project_id = None
        for proj_id, project in st.session_state.projects.items():
            if project['name'] == selected_project:
                current_project = project
                current_project_id = proj_id
                break
        
        st.subheader(f"üìÖ Master Plan - {selected_project}")
        
        # Initialize master plan if not exists
        if 'master_plan' not in current_project:
            current_project['master_plan'] = {}
        
        # Define the 5 steps
        steps = {
            'step_1': {
                'name': '1. Kh·∫£o s√°t & Ho√†n thi·ªán t·ªù tr√¨nh',
                'description': 'Thu th·∫≠p y√™u c·∫ßu, so·∫°n th·∫£o ƒë·ªÅ xu·∫•t',
                'icon': 'üîç'
            },
            'step_2': {
                'name': '2. L·ª±a ch·ªçn nh√† cung c·∫•p (LCNCC)',
                'description': 'RFI, so s√°nh, ƒë√†m ph√°n, ch·ªçn NCC',
                'icon': 'üè¢'
            },
            'step_3': {
                'name': '3. Tri·ªÉn khai',
                'description': 'K√Ω h·ª£p ƒë·ªìng, tri·ªÉn khai k·ªπ thu·∫≠t',
                'icon': '‚öôÔ∏è'
            },
            'step_4': {
                'name': '4. Nghi·ªám thu',
                'description': 'Ki·ªÉm th·ª≠, nghi·ªám thu k·ªπ thu·∫≠t & nghi·ªáp v·ª•',
                'icon': '‚úÖ'
            },
            'step_5': {
                'name': '5. ƒê∆∞a v√†o s·ª≠ d·ª•ng',
                'description': 'Chuy·ªÉn giao, ƒë√†o t·∫°o, ƒë√°nh gi√° hi·ªáu qu·∫£',
                'icon': 'üöÄ'
            }
        }
        
        # Master Plan Progress
        col1, col2 = st.columns([3, 1])
        
        with col1:
            # Progress tracking
            completed_steps = 0
            total_steps = len(steps)
            
            for step_key, step_info in steps.items():
                if step_key not in current_project['master_plan']:
                    current_project['master_plan'][step_key] = {
                        'status': 'Ch∆∞a b·∫Øt ƒë·∫ßu',
                        'assignee': '',
                        'deadline': '',
                        'notes': '',
                        'progress': 0
                    }
                
                step_data = current_project['master_plan'][step_key]
                if step_data['status'] == 'Ho√†n th√†nh':
                    completed_steps += 1
        
        with col2:
            progress_percentage = (completed_steps / total_steps) * 100
            st.metric("Ti·∫øn ƒë·ªô t·ªïng th·ªÉ", f"{progress_percentage:.0f}%")
            
            # Progress bar
            st.progress(progress_percentage / 100)
        
        # Step management
        st.subheader("üìã Chi ti·∫øt c√°c B∆∞·ªõc")
        
        for step_key, step_info in steps.items():
            step_data = current_project['master_plan'][step_key]
            
            with st.expander(f"{step_info['icon']} {step_info['name']}", 
                           expanded=(step_data['status'] not in ['Ho√†n th√†nh'])):
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    status = st.selectbox(
                        "Tr·∫°ng th√°i:",
                        ["Ch∆∞a b·∫Øt ƒë·∫ßu", "ƒêang th·ª±c hi·ªán", "Ho√†n th√†nh", "T·∫°m d·ª´ng"],
                        index=["Ch∆∞a b·∫Øt ƒë·∫ßu", "ƒêang th·ª±c hi·ªán", "Ho√†n th√†nh", "T·∫°m d·ª´ng"].index(step_data['status']),
                        key=f"{step_key}_status"
                    )
                
                with col2:
                    assignee = st.text_input(
                        "Ng∆∞·ªùi ph·ª• tr√°ch:",
                        value=step_data['assignee'],
                        key=f"{step_key}_assignee"
                    )
                
                with col3:
                    deadline = st.date_input(
                        "Deadline:",
                        value=datetime.fromisoformat(step_data['deadline']) if step_data['deadline'] else datetime.now(),
                        key=f"{step_key}_deadline"
                    )
                
                progress = st.slider(
                    "Ti·∫øn ƒë·ªô (%)",
                    0, 100, 
                    value=step_data['progress'],
                    key=f"{step_key}_progress"
                )
                
                notes = st.text_area(
                    "Ghi ch√∫:",
                    value=step_data['notes'],
                    height=80,
                    key=f"{step_key}_notes"
                )
                
                # Update step data
                current_project['master_plan'][step_key].update({
                    'status': status,
                    'assignee': assignee,
                    'deadline': deadline.isoformat(),
                    'progress': progress,
                    'notes': notes
                })
                
                # Status indicator
                if status == 'Ho√†n th√†nh':
                    st.success("‚úÖ B∆∞·ªõc n√†y ƒë√£ ho√†n th√†nh")
                elif status == 'ƒêang th·ª±c hi·ªán':
                    if datetime.now().date() > deadline:
                        st.error("‚ö†Ô∏è ƒê√£ qu√° deadline!")
                    else:
                        days_left = (deadline - datetime.now().date()).days
                        st.info(f"üîÑ ƒêang th·ª±c hi·ªán - C√≤n {days_left} ng√†y")
                elif status == 'T·∫°m d·ª´ng':
                    st.warning("‚è∏Ô∏è T·∫°m d·ª´ng")
        
        # Save master plan
        if st.button("üíæ L∆∞u Master Plan", type="primary"):
            current_project['master_plan']['updated_date'] = datetime.now().isoformat()
            st.success("‚úÖ Master Plan ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")
        
        # Master Plan Summary
        st.subheader("üìä T√≥m t·∫Øt Master Plan")
        
        # Create summary table
        summary_data = []
        for step_key, step_info in steps.items():
            step_data = current_project['master_plan'][step_key]
            
            # Calculate days to deadline
            if step_data['deadline']:
                deadline_date = datetime.fromisoformat(step_data['deadline']).date()
                days_to_deadline = (deadline_date - datetime.now().date()).days
                if days_to_deadline < 0:
                    deadline_status = f"Qu√° h·∫°n {abs(days_to_deadline)} ng√†y"
                elif days_to_deadline == 0:
                    deadline_status = "H√¥m nay"
                else:
                    deadline_status = f"C√≤n {days_to_deadline} ng√†y"
            else:
                deadline_status = "Ch∆∞a set"
            
            summary_data.append({
                'B∆∞·ªõc': step_info['name'],
                'Tr·∫°ng th√°i': step_data['status'],
                'Ng∆∞·ªùi ph·ª• tr√°ch': step_data['assignee'] or 'Ch∆∞a ph√¢n c√¥ng',
                'Ti·∫øn ƒë·ªô (%)': f"{step_data['progress']}%",
                'Deadline': deadline_status,
                'Ghi ch√∫': step_data['notes'][:50] + '...' if len(step_data['notes']) > 50 else step_data['notes']
            })
        
        df_master = pd.DataFrame(summary_data)
        st.dataframe(df_master, use_container_width=True)
        
        # Export master plan
        st.markdown(create_download_link(df_master, f"master_plan_{selected_project}.csv", 
                                       "üì• T·∫£i Master Plan"), unsafe_allow_html=True)
        
        # Timeline visualization
        st.subheader("üìÖ Timeline D·ª± √°n")
        
        # Create Gantt chart data
        gantt_data = []
        for step_key, step_info in steps.items():
            step_data = current_project['master_plan'][step_key]
            if step_data['deadline']:
                gantt_data.append({
                    'Task': step_info['name'],
                    'Start': datetime.now().date().isoformat(),
                    'Finish': step_data['deadline'],
                    'Status': step_data['status'],
                    'Progress': step_data['progress']
                })
        
        if gantt_data:
            df_gantt = pd.DataFrame(gantt_data)
            fig = px.timeline(df_gantt, x_start="Start", x_end="Finish", y="Task", 
                            color="Status", title="Timeline D·ª± √°n")
            fig.update_yaxes(autorange="reversed")
            st.plotly_chart(fig, use_container_width=True)

if __name__ == "__main__":
    main()
