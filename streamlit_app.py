import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import io
import base64
from typing import Dict, List
import json
import requests
import uuid

# [Gi·ªØ nguy√™n c√°c import v√† config t·ª´ file c≈©...]

# Th√™m v√†o session state initialization
if 'market_research' not in st.session_state:
    st.session_state.market_research = {}
if 'software_database' not in st.session_state:
    # Database m·∫´u c√°c ph·∫ßn m·ªÅm th·ªã tr∆∞·ªùng
    st.session_state.software_database = {
        'ERP': [
            {
                'name': 'SAP S/4HANA',
                'vendor': 'SAP SE',
                'category': 'ERP',
                'price_range': '50,000-500,000 USD',
                'deployment': ['On-premise', 'Cloud', 'Hybrid'],
                'features': ['Financial Management', 'Supply Chain', 'Manufacturing', 'HR'],
                'pros': ['Comprehensive functionality', 'Strong integration', 'Industry-specific solutions'],
                'cons': ['High cost', 'Complex implementation', 'Steep learning curve'],
                'rating': 4.2,
                'market_share': '22%',
                'website': 'https://www.sap.com',
                'support_vietnam': True
            },
            {
                'name': 'Oracle NetSuite',
                'vendor': 'Oracle Corporation',
                'category': 'ERP',
                'price_range': '99-499 USD/user/month',
                'deployment': ['Cloud'],
                'features': ['Financials', 'CRM', 'E-commerce', 'Inventory'],
                'pros': ['Cloud-native', 'Scalable', 'Good for SMEs'],
                'cons': ['Limited customization', 'Can be expensive', 'Learning curve'],
                'rating': 4.1,
                'market_share': '15%',
                'website': 'https://www.netsuite.com',
                'support_vietnam': True
            }
        ],
        'CRM': [
            {
                'name': 'Salesforce Sales Cloud',
                'vendor': 'Salesforce',
                'category': 'CRM',
                'price_range': '25-300 USD/user/month',
                'deployment': ['Cloud'],
                'features': ['Lead Management', 'Opportunity Management', 'Sales Analytics', 'Mobile App'],
                'pros': ['Market leader', 'Extensive customization', 'Strong ecosystem'],
                'cons': ['Expensive', 'Complex for small businesses', 'Requires training'],
                'rating': 4.3,
                'market_share': '23%',
                'website': 'https://www.salesforce.com',
                'support_vietnam': True
            },
            {
                'name': 'HubSpot CRM',
                'vendor': 'HubSpot',
                'category': 'CRM',
                'price_range': 'Free - 1,200 USD/month',
                'deployment': ['Cloud'],
                'features': ['Contact Management', 'Deal Pipeline', 'Email Marketing', 'Reports'],
                'pros': ['Free tier available', 'User-friendly', 'Good integration'],
                'cons': ['Limited advanced features in free tier', 'Can get expensive'],
                'rating': 4.5,
                'market_share': '12%',
                'website': 'https://www.hubspot.com',
                'support_vietnam': False
            }
        ],
        'HR': [
            {
                'name': 'Workday HCM',
                'vendor': 'Workday',
                'category': 'HR',
                'price_range': '100-300 USD/employee/year',
                'deployment': ['Cloud'],
                'features': ['Core HR', 'Payroll', 'Talent Management', 'Analytics'],
                'pros': ['Modern UI', 'Mobile-first', 'Strong analytics'],
                'cons': ['Expensive', 'Limited customization', 'Implementation complexity'],
                'rating': 4.0,
                'market_share': '18%',
                'website': 'https://www.workday.com',
                'support_vietnam': False
            }
        ]
    }

def market_research_page():
    st.header("üîç THAM KH·∫¢O PH·∫¶N M·∫ÄM TH·ªä TR∆Ø·ªúNG")
    st.markdown("---")
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üîç Kh·∫£o s√°t Th·ªã tr∆∞·ªùng", 
        "üìä So s√°nh Ph·∫ßn m·ªÅm", 
        "üí° AI T∆∞ v·∫•n", 
        "üìã B√°o c√°o Ph√¢n t√≠ch",
        "‚öôÔ∏è Qu·∫£n l√Ω Database"
    ])
    
    with tab1:
        market_survey_section()
    
    with tab2:
        software_comparison_section()
    
    with tab3:
        ai_consultation_section()
    
    with tab4:
        market_analysis_report()
    
    with tab5:
        database_management_section()

def market_survey_section():
    st.subheader("üîç KH·∫¢O S√ÅT TH·ªä TR∆Ø·ªúNG PH·∫¶N M·ªÄM")
    
    # Survey creation
    with st.expander("‚ûï T·∫°o Kh·∫£o s√°t M·ªõi", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            survey_name = st.text_input("T√™n kh·∫£o s√°t", placeholder="V√≠ d·ª•: Kh·∫£o s√°t ERP cho doanh nghi·ªáp v·ª´a")
            software_category = st.selectbox("Lo·∫°i ph·∫ßn m·ªÅm", 
                                           ['ERP', 'CRM', 'HR', 'Accounting', 'Project Management', 'BI/Analytics', 'Other'])
            budget_range = st.selectbox("Ng√¢n s√°ch", 
                                      ['< 100 tri·ªáu VNƒê', '100-500 tri·ªáu VNƒê', '500 tri·ªáu - 2 t·ª∑ VNƒê', '> 2 t·ª∑ VNƒê'])
        
        with col2:
            company_size = st.selectbox("Quy m√¥ c√¥ng ty", 
                                      ['< 50 nh√¢n vi√™n', '50-200 nh√¢n vi√™n', '200-1000 nh√¢n vi√™n', '> 1000 nh√¢n vi√™n'])
            deployment_preference = st.multiselect("H√¨nh th·ª©c tri·ªÉn khai ∆∞u ti√™n",
                                                 ['On-premise', 'Cloud', 'Hybrid'])
            priority_features = st.multiselect("T√≠nh nƒÉng ∆∞u ti√™n",
                                             ['Cost-effective', 'Easy to use', 'Scalability', 'Integration', 
                                              'Security', 'Mobile support', 'Local support', 'Customization'])
        
        requirements = st.text_area("Y√™u c·∫ßu chi ti·∫øt",
                                  placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ y√™u c·∫ßu nghi·ªáp v·ª•, t√≠nh nƒÉng c·∫ßn thi·∫øt...")
        
        if st.button("üöÄ T·∫°o Kh·∫£o s√°t", type="primary"):
            if survey_name and software_category:
                survey_id = generate_id()
                st.session_state.market_research[survey_id] = {
                    'name': survey_name,
                    'category': software_category,
                    'budget_range': budget_range,
                    'company_size': company_size,
                    'deployment_preference': deployment_preference,
                    'priority_features': priority_features,
                    'requirements': requirements,
                    'created_date': datetime.now().isoformat(),
                    'status': 'Active',
                    'research_results': []
                }
                st.success(f"‚úÖ Kh·∫£o s√°t '{survey_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                st.rerun()
    
    # Display existing surveys
    if st.session_state.market_research:
        st.subheader("üìã Danh s√°ch Kh·∫£o s√°t")
        
        for survey_id, survey in st.session_state.market_research.items():
            with st.expander(f"üìä {survey['name']} - {survey['category']}"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write(f"**Ng√¢n s√°ch:** {survey['budget_range']}")
                    st.write(f"**Quy m√¥:** {survey['company_size']}")
                
                with col2:
                    st.write(f"**Tri·ªÉn khai:** {', '.join(survey['deployment_preference'])}")
                    st.write(f"**Tr·∫°ng th√°i:** {survey['status']}")
                
                with col3:
                    st.write(f"**Ng√†y t·∫°o:** {survey['created_date'][:10]}")
                    st.write(f"**K·∫øt qu·∫£:** {len(survey.get('research_results', []))} ph·∫ßn m·ªÅm")
                
                if st.button(f"üîç T√¨m ki·∫øm Ph·∫ßn m·ªÅm", key=f"search_{survey_id}"):
                    # Auto search based on survey criteria
                    results = search_software_by_criteria(survey)
                    survey['research_results'] = results
                    st.success(f"‚úÖ ƒê√£ t√¨m th·∫•y {len(results)} ph·∫ßn m·ªÅm ph√π h·ª£p!")
                    st.rerun()

def search_software_by_criteria(survey):
    """Search software based on survey criteria"""
    results = []
    category = survey['category']
    
    if category in st.session_state.software_database:
        for software in st.session_state.software_database[category]:
            # Simple matching logic - in production, this would be more sophisticated
            match_score = 0
            
            # Check deployment preference
            if any(dep in software['deployment'] for dep in survey['deployment_preference']):
                match_score += 30
            
            # Check support in Vietnam
            if 'Local support' in survey['priority_features'] and software['support_vietnam']:
                match_score += 20
            
            # Add to results with score
            software_result = software.copy()
            software_result['match_score'] = match_score
            software_result['survey_id'] = survey.get('survey_id', '')
            results.append(software_result)
    
    # Sort by match score
    return sorted(results, key=lambda x: x['match_score'], reverse=True)

def software_comparison_section():
    st.subheader("üìä SO S√ÅNH PH·∫¶N M·ªÄM")
    
    # Software selection for comparison
    all_software = []
    for category, software_list in st.session_state.software_database.items():
        all_software.extend(software_list)
    
    if not all_software:
        st.info("üìù Ch∆∞a c√≥ d·ªØ li·ªáu ph·∫ßn m·ªÅm ƒë·ªÉ so s√°nh")
        return
    
    software_names = [sw['name'] for sw in all_software]
    selected_software = st.multiselect("Ch·ªçn ph·∫ßn m·ªÅm ƒë·ªÉ so s√°nh (t·ªëi ƒëa 4):", 
                                     software_names, max_selections=4)
    
    if len(selected_software) >= 2:
        # Get selected software data
        comparison_data = []
        for name in selected_software:
            for sw in all_software:
                if sw['name'] == name:
                    comparison_data.append(sw)
                    break
        
        # Comparison table
        st.subheader("üìã B·∫£ng So s√°nh Chi ti·∫øt")
        
        comparison_df_data = {
            'Ti√™u ch√≠': ['T√™n s·∫£n ph·∫©m', 'Nh√† cung c·∫•p', 'Lo·∫°i', 'Gi√°', 'Tri·ªÉn khai', 
                        'ƒê√°nh gi√°', 'Th·ªã ph·∫ßn', 'H·ªó tr·ª£ VN', 'Website']
        }
        
        for sw in comparison_data:
            comparison_df_data[sw['name']] = [
                sw['name'],
                sw['vendor'],
                sw['category'],
                sw['price_range'],
                ', '.join(sw['deployment']),
                f"{sw['rating']}/5.0",
                sw['market_share'],
                '‚úÖ' if sw['support_vietnam'] else '‚ùå',
                sw['website']
            ]
        
        comparison_df = pd.DataFrame(comparison_df_data)
        st.dataframe(comparison_df, use_container_width=True)
        
        # Visualization
        col1, col2 = st.columns(2)
        
        with col1:
            # Rating comparison
            fig_rating = go.Figure(data=[
                go.Bar(name='Rating', 
                      x=[sw['name'] for sw in comparison_data],
                      y=[sw['rating'] for sw in comparison_data])
            ])
            fig_rating.update_layout(title='So s√°nh ƒê√°nh gi√° (Rating)')
            st.plotly_chart(fig_rating, use_container_width=True)
        
        with col2:
            # Market share comparison
            fig_market = px.pie(
                values=[float(sw['market_share'].replace('%', '')) for sw in comparison_data],
                names=[sw['name'] for sw in comparison_data],
                title='Th·ªã ph·∫ßn'
            )
            st.plotly_chart(fig_market, use_container_width=True)
        
        # Detailed feature comparison
        st.subheader("üîç So s√°nh T√≠nh nƒÉng Chi ti·∫øt")
        
        for i, sw in enumerate(comparison_data):
            with st.expander(f"üì¶ {sw['name']} - Chi ti·∫øt"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**∆Øu ƒëi·ªÉm:**")
                    for pro in sw['pros']:
                        st.write(f"‚úÖ {pro}")
                    
                    st.write("**T√≠nh nƒÉng ch√≠nh:**")
                    for feature in sw['features']:
                        st.write(f"üîß {feature}")
                
                with col2:
                    st.write("**Nh∆∞·ª£c ƒëi·ªÉm:**")
                    for con in sw['cons']:
                        st.write(f"‚ùå {con}")
        
        # Export comparison
        if st.button("üì§ Xu·∫•t b√°o c√°o so s√°nh"):
            st.markdown(create_download_link(comparison_df, 
                       f"software_comparison_{datetime.now().strftime('%Y%m%d')}.csv", 
                       "üì• T·∫£i b√°o c√°o so s√°nh"), unsafe_allow_html=True)

def ai_consultation_section():
    st.subheader("üí° AI T∆Ø V·∫§N CH·ªåN PH·∫¶N M·ªÄM")
    
    # AI Consultation Form
    with st.form("ai_consultation"):
        st.write("**M√¥ t·∫£ y√™u c·∫ßu c·ªßa b·∫°n ƒë·ªÉ AI t∆∞ v·∫•n ph·∫ßn m·ªÅm ph√π h·ª£p:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            business_type = st.selectbox("Lo·∫°i h√¨nh kinh doanh",
                                       ['S·∫£n xu·∫•t', 'Th∆∞∆°ng m·∫°i', 'D·ªãch v·ª•', 'C√¥ng ngh·ªá', 'T√†i ch√≠nh', 'Y t·∫ø', 'Gi√°o d·ª•c'])
            current_pain_points = st.text_area("V·∫•n ƒë·ªÅ hi·ªán t·∫°i ƒëang g·∫∑p ph·∫£i",
                                             placeholder="V√≠ d·ª•: Qu·∫£n l√Ω kho kh√¥ng hi·ªáu qu·∫£, b√°o c√°o t√†i ch√≠nh ch·∫≠m...")
        
        with col2:
            integration_needs = st.text_area("Y√™u c·∫ßu t√≠ch h·ª£p",
                                           placeholder="V√≠ d·ª•: C·∫ßn t√≠ch h·ª£p v·ªõi h·ªá th·ªëng k·∫ø to√°n hi·ªán t·∫°i...")
            special_requirements = st.text_area("Y√™u c·∫ßu ƒë·∫∑c bi·ªát",
                                              placeholder="V√≠ d·ª•: Ph·∫£i tu√¢n th·ªß quy ƒë·ªãnh v·ªÅ d·ªØ li·ªáu c√° nh√¢n...")
        
        submitted = st.form_submit_button("ü§ñ Nh·∫≠n T∆∞ v·∫•n AI", type="primary")
        
        if submitted:
            with st.spinner("ü§ñ AI ƒëang ph√¢n t√≠ch y√™u c·∫ßu c·ªßa b·∫°n..."):
                # Simulate AI analysis
                import time
                time.sleep(2)
                
                ai_recommendation = generate_ai_recommendation(
                    business_type, current_pain_points, integration_needs, special_requirements
                )
                
                st.success("‚úÖ AI ƒë√£ ho√†n th√†nh ph√¢n t√≠ch!")
                
                # Display AI recommendations
                st.subheader("üéØ KHUY·∫æN NGH·ªä T·ª™ AI")
                
                tab1, tab2, tab3 = st.tabs(["üèÜ Top Khuy·∫øn ngh·ªã", "üìä Ph√¢n t√≠ch", "‚ö†Ô∏è L∆∞u √Ω"])
                
                with tab1:
                    for i, rec in enumerate(ai_recommendation['top_recommendations'], 1):
                        with st.container():
                            st.write(f"### {i}. {rec['name']}")
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("ƒê·ªô ph√π h·ª£p", f"{rec['match_score']}/100")
                            with col2:
                                st.metric("ƒê√°nh gi√°", f"{rec['rating']}/5.0")
                            with col3:
                                st.metric("Chi ph√≠ ∆∞·ªõc t√≠nh", rec['estimated_cost'])
                            
                            st.write(f"**L√Ω do khuy·∫øn ngh·ªã:** {rec['reason']}")
                            st.write("---")
                
                with tab2:
                    st.write(ai_recommendation['analysis'])
                
                with tab3:
                    st.write(ai_recommendation['considerations'])

def generate_ai_recommendation(business_type, pain_points, integration_needs, special_requirements):
    """Generate AI recommendation based on input - This would use actual AI/LLM in production"""
    
    # Mock AI recommendation logic
    recommendations = []
    
    # Simple rule-based recommendation for demo
    if 'kho' in pain_points.lower() or 'inventory' in pain_points.lower():
        recommendations.append({
            'name': 'SAP S/4HANA',
            'match_score': 85,
            'rating': 4.2,
            'estimated_cost': '2-5 t·ª∑ VNƒê',
            'reason': 'M·∫°nh v·ªÅ qu·∫£n l√Ω chu·ªói cung ·ª©ng v√† inventory, ph√π h·ª£p v·ªõi doanh nghi·ªáp l·ªõn'
        })
    
    if business_type == 'Th∆∞∆°ng m·∫°i':
        recommendations.append({
            'name': 'Oracle NetSuite',
            'match_score': 78,
            'rating': 4.1,
            'estimated_cost': '500 tri·ªáu - 2 t·ª∑ VNƒê',
            'reason': 'Gi·∫£i ph√°p cloud t·ªët cho doanh nghi·ªáp th∆∞∆°ng m·∫°i, t√≠ch h·ª£p e-commerce'
        })
    
    # Ensure we have at least some recommendations
    if not recommendations:
        recommendations = [
            {
                'name': 'HubSpot CRM',
                'match_score': 72,
                'rating': 4.5,
                'estimated_cost': '100-500 tri·ªáu VNƒê/nƒÉm',
                'reason': 'Ph√π h·ª£p cho doanh nghi·ªáp SME, d·ªÖ s·ª≠ d·ª•ng v√† c√≥ tier mi·ªÖn ph√≠'
            }
        ]
    
    return {
        'top_recommendations': recommendations[:3],
        'analysis': f"""
        **Ph√¢n t√≠ch t√¨nh hu·ªëng:**
        - Lo·∫°i h√¨nh: {business_type}
        - V·∫•n ƒë·ªÅ ch√≠nh: {pain_points}
        - Y√™u c·∫ßu t√≠ch h·ª£p: {integration_needs}
        
        **ƒê√°nh gi√°:**
        D·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p, AI khuy·∫øn ngh·ªã t·∫≠p trung v√†o c√°c gi·∫£i ph√°p c√≥ kh·∫£ nƒÉng t√≠ch h·ª£p cao 
        v√† ph√π h·ª£p v·ªõi quy m√¥ doanh nghi·ªáp c·ªßa b·∫°n.
        """,
        'considerations': """
        **Nh·ªØng ƒëi·ªÉm c·∫ßn l∆∞u √Ω:**
        - N√™n th·ª±c hi·ªán POC (Proof of Concept) tr∆∞·ªõc khi ƒë·∫ßu t∆∞ l·ªõn
        - Xem x√©t kh·∫£ nƒÉng h·ªó tr·ª£ v√† ƒë√†o t·∫°o ng∆∞·ªùi d√πng
        - ƒê√°nh gi√° t·ªïng chi ph√≠ s·ªü h·ªØu (TCO) trong 3-5 nƒÉm
        - Ki·ªÉm tra kh·∫£ nƒÉng tu√¢n th·ªß quy ƒë·ªãnh ph√°p l√Ω Vi·ªát Nam
        """
    }

def market_analysis_report():
    st.subheader("üìã B√ÅO C√ÅO PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG")
    
    # Market overview
    st.write("### üìä T·ªïng quan Th·ªã tr∆∞·ªùng")
    
    # Calculate market statistics
    total_software = sum(len(sw_list) for sw_list in st.session_state.software_database.values())
    categories = list(st.session_state.software_database.keys())
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("T·ªïng s·ªë ph·∫ßn m·ªÅm", total_software)
    
    with col2:
        st.metric("S·ªë danh m·ª•c", len(categories))
    
    with col3:
        vietnam_support = sum(
            sum(1 for sw in sw_list if sw['support_vietnam']) 
            for sw_list in st.session_state.software_database.values()
        )
        st.metric("H·ªó tr·ª£ VN", f"{vietnam_support}/{total_software}")
    
    with col4:
        avg_rating = sum(
            sum(sw['rating'] for sw in sw_list) / len(sw_list)
            for sw_list in st.session_state.software_database.values()
            if sw_list
        ) / len(categories) if categories else 0
        st.metric("ƒê√°nh gi√° TB", f"{avg_rating:.1f}/5.0")
    
    # Category breakdown
    st.write("### üìà Ph√¢n t√≠ch theo Danh m·ª•c")
    
    category_data = []
    for category, sw_list in st.session_state.software_database.items():
        if sw_list:
            avg_rating = sum(sw['rating'] for sw in sw_list) / len(sw_list)
            vietnam_support_count = sum(1 for sw in sw_list if sw['support_vietnam'])
            vietnam_support_pct = (vietnam_support_count / len(sw_list)) * 100
            
            category_data.append({
                'Danh m·ª•c': category,
                'S·ªë l∆∞·ª£ng': len(sw_list),
                'ƒê√°nh gi√° TB': round(avg_rating, 1),
                'H·ªó tr·ª£ VN (%)': round(vietnam_support_pct, 1)
            })
    
    if category_data:
        df_category = pd.DataFrame(category_data)
        st.dataframe(df_category, use_container_width=True)
        
        # Visualizations
        col1, col2 = st.columns(2)
        
        with col1:
            fig1 = px.bar(df_category, x='Danh m·ª•c', y='S·ªë l∆∞·ª£ng', 
                         title='S·ªë l∆∞·ª£ng Ph·∫ßn m·ªÅm theo Danh m·ª•c')
            st.plotly_chart(fig1, use_container_width=True)
        
        with col2:
            fig2 = px.bar(df_category, x='Danh m·ª•c', y='ƒê√°nh gi√° TB', 
                         title='ƒê√°nh gi√° Trung b√¨nh theo Danh m·ª•c')
            st.plotly_chart(fig2, use_container_width=True)
    
    # Trend analysis
    st.write("### üìà Ph√¢n t√≠ch Xu h∆∞·ªõng")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Xu h∆∞·ªõng Tri·ªÉn khai:**")
        deployment_count = {'Cloud': 0, 'On-premise': 0, 'Hybrid': 0}
        
        for sw_list in st.session_state.software_database.values():
            for sw in sw_list:
                for deployment in sw['deployment']:
                    deployment_count[deployment] += 1
        
        fig_deployment = px.pie(
            values=list(deployment_count.values()),
            names=list(deployment_count.keys()),
            title='H√¨nh th·ª©c Tri·ªÉn khai'
        )
        st.plotly_chart(fig_deployment, use_container_width=True)
    
    with col2:
        st.write("**Top Features ph·ªï bi·∫øn:**")
        feature_count = {}
        
        for sw_list in st.session_state.software_database.values():
            for sw in sw_list:
                for feature in sw['features']:
                    feature_count[feature] = feature_count.get(feature, 0) + 1
        
        # Get top 10 features
        top_features = sorted(feature_count.items(), key=lambda x: x[1], reverse=True)[:10]
        
        if top_features:
            fig_features = px.bar(
                x=[item[1] for item in top_features],
                y=[item[0] for item in top_features],
                orientation='h',
                title='Top 10 T√≠nh nƒÉng Ph·ªï bi·∫øn'
            )
            fig_features.update_layout(yaxis={'categoryorder': 'total ascending'})
            st.plotly_chart(fig_features, use_container_width=True)
    
    # Export report
    if st.button("üì§ Xu·∫•t B√°o c√°o Th·ªã tr∆∞·ªùng"):
        # Create comprehensive market report
        all_software_data = []
        
        for category, sw_list in st.session_state.software_database.items():
            for sw in sw_list:
                all_software_data.append({
                    'T√™n': sw['name'],
                    'Nh√† cung c·∫•p': sw['vendor'],
                    'Danh m·ª•c': sw['category'],
                    'Gi√°': sw['price_range'],
                    'Tri·ªÉn khai': ', '.join(sw['deployment']),
                    'ƒê√°nh gi√°': sw['rating'],
                    'Th·ªã ph·∫ßn': sw['market_share'],
                    'H·ªó tr·ª£ VN': sw['support_vietnam'],
                    'Website': sw['website'],
                    'T√≠nh nƒÉng': ', '.join(sw['features'][:3])  # Top 3 features
                })
        
        df_market_report = pd.DataFrame(all_software_data)
        
        st.markdown(create_download_link(
            df_market_report, 
            f"market_analysis_{datetime.now().strftime('%Y%m%d')}.csv",
            "üì• T·∫£i B√°o c√°o Th·ªã tr∆∞·ªùng"
        ), unsafe_allow_html=True)

def database_management_section():
    st.subheader("‚öôÔ∏è QU·∫¢N L√ù DATABASE PH·∫¶N M·ªÄM")
    
    # Add new software
    with st.expander("‚ûï Th√™m Ph·∫ßn m·ªÅm M·ªõi"):
        col1, col2 = st.columns(2)
        
        with col1:
            new_name = st.text_input("T√™n ph·∫ßn m·ªÅm")
            new_vendor = st.text_input("Nh√† cung c·∫•p")
            new_category = st.selectbox("Danh m·ª•c", 
                                      list(st.session_state.software_database.keys()) + ['T·∫°o m·ªõi'])
            if new_category == 'T·∫°o m·ªõi':
                new_category = st.text_input("T√™n danh m·ª•c m·ªõi")
        
        with col2:
            new_price = st.text_input("Kho·∫£ng gi√°", placeholder="V√≠ d·ª•: 100-500 USD/month")
            new_deployment = st.multiselect("H√¨nh th·ª©c tri·ªÉn khai", 
                                          ['Cloud', 'On-premise', 'Hybrid'])
            new_rating = st.slider("ƒê√°nh gi√°", 1.0, 5.0, 4.0, 0.1)
        
        new_features = st.text_input("T√≠nh nƒÉng ch√≠nh (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)")
        new_pros = st.text_input("∆Øu ƒëi·ªÉm (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)")
        new_cons = st.text_input("Nh∆∞·ª£c ƒëi·ªÉm (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            new_market_share = st.text_input("Th·ªã ph·∫ßn", placeholder="V√≠ d·ª•: 15%")
        with col2:
            new_website = st.text_input("Website")
        with col3:
            new_support_vn = st.checkbox("H·ªó tr·ª£ t·∫°i Vi·ªát Nam")
        
        if st.button("‚ûï Th√™m Ph·∫ßn m·ªÅm"):
            if new_name and new_vendor and new_category:
                new_software = {
                    'name': new_name,
                    'vendor': new_vendor,
                    'category': new_category,
                    'price_range': new_price,
                    'deployment': new_deployment,
                    'features': [f.strip() for f in new_features.split(',') if f.strip()],
                    'pros': [p.strip() for p in new_pros.split(',') if p.strip()],
                    'cons': [c.strip() for c in new_cons.split(',') if c.strip()],
                    'rating': new_rating,
                    'market_share': new_market_share,
                    'website': new_website,
                    'support_vietnam': new_support_vn
                }
                
                if new_category not in st.session_state.software_database:
                    st.session_state.software_database[new_category] = []
                
                st.session_state.software_database[new_category].append(new_software)
                st.success(f"‚úÖ ƒê√£ th√™m ph·∫ßn m·ªÅm '{new_name}' th√†nh c√¥ng!")
                st.rerun()
    
    # Manage existing software
    st.write("### üìã Danh s√°ch Ph·∫ßn m·ªÅm Hi·ªán t·∫°i")
    
    for category, sw_list in st.session_state.software_database.items():
        with st.expander(f"üìÇ {category} ({len(sw_list)} ph·∫ßn m·ªÅm)"):
            for i, sw in enumerate(sw_list):
                col1, col2, col3 = st.columns([3, 1, 1])
                
                with col1:
                    st.write(f"**{sw['name']}** - {sw['vendor']}")
                    st.write(f"ƒê√°nh gi√°: {sw['rating']}/5.0 | Th·ªã ph·∫ßn: {sw['market_share']}")
                
                with col2:
                    if st.button("‚úèÔ∏è S·ª≠a", key=f"edit_{category}_{i}"):
                        st.info("T√≠nh nƒÉng ch·ªânh s·ª≠a - S·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn")
                
                with col3:
                    if st.button("üóëÔ∏è X√≥a", key=f"delete_{category}_{i}"):
                        st.session_state.software_database[category].pop(i)
                        st.success(f"‚úÖ ƒê√£ x√≥a {sw['name']}")
                        st.rerun()
    
    # Import/Export data
    st.write("### üì§üì• Import/Export D·ªØ li·ªáu")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Export current database
        if st.button("üì§ Xu·∫•t Database"):
            all_data = []
            for category, sw_list in st.session_state.software_database.items():
                for sw in sw_list:
                    sw_export = sw.copy()
                    sw_export['features_str'] = ', '.join(sw['features'])
                    sw_export['pros_str'] = ', '.join(sw['pros'])
                    sw_export['cons_str'] = ', '.join(sw['cons'])
                    sw_export['deployment_str'] = ', '.join(sw['deployment'])
                    all_data.append(sw_export)
            
            if all_data:
                df_export = pd.DataFrame(all_data)
                st.markdown(create_download_link(
                    df_export, 
                    f"software_database_{datetime.now().strftime('%Y%m%d')}.csv",
                    "üì• T·∫£i Database"
                ), unsafe_allow_html=True)
    
    with col2:
        # Import data
        uploaded_file = st.file_uploader("üì• Import Database CSV", type=['csv'])
        if uploaded_file:
            try:
                df_import = pd.read_csv(uploaded_file)
                if st.button("üîÑ Import D·ªØ li·ªáu"):
                    # Process import - simplified for demo
                    st.success("‚úÖ Import th√†nh c√¥ng! (Demo)")
            except Exception as e:
                st.error(f"‚ùå L·ªói import: {str(e)}")

# Update main navigation to include market research
def main():
    st.title("üè¢ H·ªÜ TH·ªêNG QU·∫¢N L√ù K·∫æ HO·∫†CH MUA S·∫ÆM")
    st.markdown("---")

    # Sidebar navigation
    with st.sidebar:
        st.header("üìã MENU CH·ª®C NƒÇNG")
        page = st.radio(
            "Ch·ªçn ch·ª©c nƒÉng:",
            [
                "üè† Dashboard T·ªïng quan",
                "üìÑ Giai ƒëo·∫°n 1: RFI & G·ª≠i NCC",
                "üí∞ Giai ƒëo·∫°n 2: K·∫ø ho·∫°ch Ng√¢n s√°ch", 
                "üìä Business Use Case",
                "üéØ Master Plan",
                "üîç Tham kh·∫£o Ph·∫ßn m·ªÅm Th·ªã tr∆∞·ªùng"  # New feature
            ]
        )

    # Route to different pages
    if page == "üè† Dashboard T·ªïng quan":
        dashboard_page()
    elif page == "üìÑ Giai ƒëo·∫°n 1: RFI & G·ª≠i NCC":
        rfi_page()
    elif page == "üí∞ Giai ƒëo·∫°n 2: K·∫ø ho·∫°ch Ng√¢n s√°ch":
        budget_page()
    elif page == "üìä Business Use Case":
        business_case_page()
    elif page == "üéØ Master Plan":
        master_plan_page()
    elif page == "üîç Tham kh·∫£o Ph·∫ßn m·ªÅm Th·ªã tr∆∞·ªùng":
        market_research_page()

if __name__ == "__main__":
    main()
